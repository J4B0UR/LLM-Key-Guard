"""HTML exporter for LLM Key Guard reports."""

import os
import json
from datetime import datetime
from typing import Dict, List, Optional

from llm_key_guard.detectors import Confidence, KeyFinding, Provider


def _create_html_header(title: str) -> str:
    """Create HTML header with styling."""
    return f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            color: #333;
            background-color: #f7f7f7;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        h1 {{
            border-bottom: 2px solid #3498db;
            padding-bottom: 10px;
            display: flex;
            align-items: center;
        }}
        h1 span.icon {{
            font-size: 1.5em;
            margin-right: 10px;
        }}
        .summary {{
            display: flex;
            flex-wrap: wrap;
            gap: 20px;
            margin: 20px 0;
        }}
        .summary-card {{
            flex: 1;
            min-width: 200px;
            padding: 15px;
            border-radius: 5px;
            background: #f8f9fa;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }}
        .summary-card h3 {{
            margin-top: 0;
            color: #3498db;
            font-size: 1.1em;
        }}
        .summary-card p {{
            font-size: 2em;
            font-weight: bold;
            margin: 5px 0;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }}
        table, th, td {{
            border: 1px solid #ddd;
        }}
        th, td {{
            padding: 12px 15px;
            text-align: left;
        }}
        th {{
            background-color: #3498db;
            color: white;
        }}
        tr:nth-child(even) {{
            background-color: #f2f2f2;
        }}
        .valid {{
            color: #e74c3c;
            font-weight: bold;
        }}
        .invalid {{
            color: #7f8c8d;
        }}
        .revoked {{
            color: #27ae60;
            font-weight: bold;
        }}
        .unknown {{
            color: #f39c12;
        }}
        .context {{
            font-family: monospace;
            background: #f8f9fa;
            padding: 8px;
            border-left: 3px solid #3498db;
            overflow-x: auto;
        }}
        .badge {{
            display: inline-block;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 0.8em;
            font-weight: bold;
        }}
        .badge-high {{
            background: #e74c3c;
            color: white;
        }}
        .badge-medium {{
            background: #f39c12;
            color: white;
        }}
        .badge-low {{
            background: #95a5a6;
            color: white;
        }}
        .alert {{
            padding: 15px;
            margin: 20px 0;
            border-radius: 5px;
            border-left: 5px solid;
        }}
        .alert-danger {{
            background-color: #fde8e8;
            border-left-color: #e74c3c;
        }}
        .alert-warning {{
            background-color: #fef6e7;
            border-left-color: #f39c12;
        }}
        .alert-success {{
            background-color: #e8f5e9;
            border-left-color: #27ae60;
        }}
        .footer {{
            text-align: center;
            margin-top: 30px;
            color: #7f8c8d;
            font-size: 0.9em;
        }}
        details {{
            margin: 10px 0;
            border: 1px solid #ddd;
            border-radius: 5px;
            overflow: hidden;
        }}
        summary {{
            padding: 12px 15px;
            background-color: #f8f9fa;
            cursor: pointer;
            font-weight: bold;
        }}
        details .content {{
            padding: 12px 15px;
        }}
        .key-prefix {{
            font-family: monospace;
            background: #eee;
            padding: 2px 4px;
            border-radius: 3px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1><span class="icon">üîê</span> LLM Key Guard Report</h1>
        <p>Generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
"""


def _create_html_footer() -> str:
    """Create HTML footer."""
    return """
        <div class="footer">
            <p>Generated by LLM Key Guard - <a href="https://github.com/seunome/llm-key-guard" target="_blank">https://github.com/seunome/llm-key-guard</a></p>
        </div>
    </div>
</body>
</html>
"""


def _create_summary_section(findings: List[KeyFinding], validated: bool = False, revoked: bool = False) -> str:
    """Create HTML summary section."""
    total_count = len(findings)
    valid_count = sum(1 for f in findings if f.valid is True) if validated else None
    revoked_count = sum(1 for f in findings if f.revoked is True) if revoked else None
    
    # Group by provider
    providers = {}
    for finding in findings:
        if finding.provider not in providers:
            providers[finding.provider] = []
        providers[finding.provider].append(finding)
    
    # Create summary cards
    summary_html = """
        <div class="summary">
            <div class="summary-card">
                <h3>Total Keys</h3>
                <p>{}</p>
            </div>
    """.format(total_count)
    
    if validated:
        summary_html += """
            <div class="summary-card">
                <h3>Valid Keys</h3>
                <p>{}</p>
            </div>
        """.format(valid_count or 0)
    
    if revoked:
        summary_html += """
            <div class="summary-card">
                <h3>Revoked Keys</h3>
                <p>{}</p>
            </div>
        """.format(revoked_count or 0)
    
    summary_html += """
        </div>
    """
    
    # Create provider summary table
    summary_html += """
        <h2>Provider Summary</h2>
        <table>
            <tr>
                <th>Provider</th>
                <th>Total</th>
    """
    
    if validated:
        summary_html += "<th>Valid</th>"
    if revoked:
        summary_html += "<th>Revoked</th>"
    
    summary_html += "</tr>"
    
    for provider, provider_findings in providers.items():
        provider_valid = sum(1 for f in provider_findings if f.valid is True) if validated else None
        provider_revoked = sum(1 for f in provider_findings if f.revoked is True) if revoked else None
        
        summary_html += f"""
            <tr>
                <td>{provider.value}</td>
                <td>{len(provider_findings)}</td>
        """
        
        if validated:
            summary_html += f"<td>{provider_valid or 0}</td>"
        if revoked:
            summary_html += f"<td>{provider_revoked or 0}</td>"
        
        summary_html += "</tr>"
    
    # Add total row
    summary_html += f"""
            <tr>
                <td><strong>TOTAL</strong></td>
                <td><strong>{total_count}</strong></td>
    """
    
    if validated:
        summary_html += f"<td><strong>{valid_count or 0}</strong></td>"
    if revoked:
        summary_html += f"<td><strong>{revoked_count or 0}</strong></td>"
    
    summary_html += """
            </tr>
        </table>
    """
    
    # Add alert based on findings
    if valid_count:
        summary_html += """
            <div class="alert alert-danger">
                <strong>ACTION REQUIRED:</strong> Valid API keys were found that should be revoked immediately.
            </div>
        """
    elif total_count > 0:
        summary_html += """
            <div class="alert alert-warning">
                <strong>WARNING:</strong> Potential API keys were found but none appear to be valid.
            </div>
        """
    else:
        summary_html += """
            <div class="alert alert-success">
                <strong>ALL CLEAR:</strong> No API keys were found.
            </div>
        """
    
    return summary_html


def _create_findings_section(findings: List[KeyFinding], validated: bool = False, revoked: bool = False) -> str:
    """Create HTML findings section."""
    if not findings:
        return """
            <h2>Detailed Findings</h2>
            <p>No findings to display.</p>
        """
    
    # Group by provider
    providers = {}
    for finding in findings:
        if finding.provider not in providers:
            providers[finding.provider] = []
        providers[finding.provider].append(finding)
    
    findings_html = """
        <h2>Detailed Findings</h2>
    """
    
    for provider, provider_findings in providers.items():
        findings_html += f"""
            <details>
                <summary>{provider.value} ({len(provider_findings)} keys)</summary>
                <div class="content">
                    <table>
                        <tr>
                            <th>Status</th>
                            <th>Confidence</th>
                            <th>Location</th>
                            <th>Key Prefix</th>
                            <th>Context</th>
                        </tr>
        """
        
        for finding in provider_findings:
            # Determine status and class
            if finding.revoked is True:
                status = "REVOKED"
                status_class = "revoked"
            elif finding.valid is True:
                status = "VALID"
                status_class = "valid"
            elif finding.valid is False:
                status = "INVALID"
                status_class = "invalid"
            else:
                status = "UNKNOWN"
                status_class = "unknown"
            
            # Determine confidence class
            if finding.confidence == Confidence.HIGH:
                confidence_class = "badge-high"
            elif finding.confidence == Confidence.MEDIUM:
                confidence_class = "badge-medium"
            else:
                confidence_class = "badge-low"
            
            # Format location
            location = ""
            if finding.file_path:
                location = finding.file_path
                if finding.line_number:
                    location += f":{finding.line_number}"
            
            # Format context (ensure HTML safety)
            context = finding.context
            context = context.replace("<", "&lt;").replace(">", "&gt;")
            
            # Get key prefix (only first 8 chars for security)
            key_prefix = finding.key[:8] + "..." if finding.key else ""
            
            findings_html += f"""
                <tr>
                    <td class="{status_class}">{status}</td>
                    <td><span class="badge {confidence_class}">{finding.confidence}</span></td>
                    <td>{location}</td>
                    <td><code class="key-prefix">{key_prefix}</code></td>
                    <td class="context">{context}</td>
                </tr>
            """
        
        findings_html += """
                    </table>
                </div>
            </details>
        """
    
    return findings_html


def create_html_report(
    findings: List[KeyFinding],
    output_file: str,
    validated: bool = False,
    revoked: bool = False,
    min_confidence: Confidence = Confidence.LOW,
) -> None:
    """Create an HTML report of findings.
    
    Args:
        findings: List of KeyFinding objects
        output_file: File to write HTML report to
        validated: Whether keys have been validated
        revoked: Whether keys have been revoked
        min_confidence: Minimum confidence level to include
    """
    # Filter by confidence
    filtered_findings = [
        f for f in findings 
        if f.confidence >= min_confidence
    ]
    
    # Build HTML report
    html_content = _create_html_header("LLM Key Guard Report")
    html_content += _create_summary_section(filtered_findings, validated, revoked)
    html_content += _create_findings_section(filtered_findings, validated, revoked)
    html_content += _create_html_footer()
    
    # Write to file
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(html_content)
    
    print(f"HTML report written to {output_file}") 